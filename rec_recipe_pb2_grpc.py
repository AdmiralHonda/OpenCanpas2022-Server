# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import rec_recipe_pb2 as rec__recipe__pb2


class RecRecipeStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.fix_name = channel.unary_unary(
                '/RecRecipe/fix_name',
                request_serializer=rec__recipe__pb2.Query.SerializeToString,
                response_deserializer=rec__recipe__pb2.SimQueryResp.FromString,
                )
        self.get_unit_list = channel.unary_unary(
                '/RecRecipe/get_unit_list',
                request_serializer=rec__recipe__pb2.Query.SerializeToString,
                response_deserializer=rec__recipe__pb2.UnitList.FromString,
                )
        self.exchange_to_g = channel.unary_unary(
                '/RecRecipe/exchange_to_g',
                request_serializer=rec__recipe__pb2.UserLikeIngredients.SerializeToString,
                response_deserializer=rec__recipe__pb2.Ingredient.FromString,
                )
        self.get_recipe = channel.unary_unary(
                '/RecRecipe/get_recipe',
                request_serializer=rec__recipe__pb2.Ingredients.SerializeToString,
                response_deserializer=rec__recipe__pb2.Recipe.FromString,
                )


class RecRecipeServicer(object):
    """Missing associated documentation comment in .proto file."""

    def fix_name(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_unit_list(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def exchange_to_g(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_recipe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RecRecipeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'fix_name': grpc.unary_unary_rpc_method_handler(
                    servicer.fix_name,
                    request_deserializer=rec__recipe__pb2.Query.FromString,
                    response_serializer=rec__recipe__pb2.SimQueryResp.SerializeToString,
            ),
            'get_unit_list': grpc.unary_unary_rpc_method_handler(
                    servicer.get_unit_list,
                    request_deserializer=rec__recipe__pb2.Query.FromString,
                    response_serializer=rec__recipe__pb2.UnitList.SerializeToString,
            ),
            'exchange_to_g': grpc.unary_unary_rpc_method_handler(
                    servicer.exchange_to_g,
                    request_deserializer=rec__recipe__pb2.UserLikeIngredients.FromString,
                    response_serializer=rec__recipe__pb2.Ingredient.SerializeToString,
            ),
            'get_recipe': grpc.unary_unary_rpc_method_handler(
                    servicer.get_recipe,
                    request_deserializer=rec__recipe__pb2.Ingredients.FromString,
                    response_serializer=rec__recipe__pb2.Recipe.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'RecRecipe', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RecRecipe(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def fix_name(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RecRecipe/fix_name',
            rec__recipe__pb2.Query.SerializeToString,
            rec__recipe__pb2.SimQueryResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_unit_list(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RecRecipe/get_unit_list',
            rec__recipe__pb2.Query.SerializeToString,
            rec__recipe__pb2.UnitList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def exchange_to_g(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RecRecipe/exchange_to_g',
            rec__recipe__pb2.UserLikeIngredients.SerializeToString,
            rec__recipe__pb2.Ingredient.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_recipe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RecRecipe/get_recipe',
            rec__recipe__pb2.Ingredients.SerializeToString,
            rec__recipe__pb2.Recipe.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
